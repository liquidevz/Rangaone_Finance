name: Docker Deploy to Domain

on:
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm install --legacy-peer-deps
      - run: npm run build
      - run: npm run lint

  docker-test:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Test Docker Build
        id: docker-build
        run: |
          docker build -t test-build . 2>&1 | tee build.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "BUILD_FAILED=true" >> $GITHUB_OUTPUT
            echo "BUILD_LOG<<EOF" >> $GITHUB_OUTPUT
            cat build.log >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Send Docker Build Failure Email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: 'Docker Build Failed - ${{ github.repository }}'
          body: |
            Docker build failed for commit ${{ github.sha }}
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            
            Build Error:
            ${{ steps.docker-build.outputs.BUILD_LOG }}
            
            Common fixes:
            - Check package.json dependencies
            - Verify Dockerfile syntax
            - Check for missing files
            
            View logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: 'GitHub Actions'

  deploy:
    needs: [test, docker-test]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy with Docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.CLOUDPANEL_HOST }}
          username: ${{ secrets.CLOUDPANEL_USER }}
          password: ${{ secrets.CLOUDPANEL_PASSWORD }}
          timeout: 600s
          command_timeout: 600s
          script: |
            # Install nvm and Node.js 20
            export NVM_DIR="$HOME/.nvm"
            if [ ! -d "$NVM_DIR" ]; then
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
            fi
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install 20
            nvm use 20
            
            # Setup domain directory
            DOMAIN_PATH="/home/${{ secrets.CLOUDPANEL_USER }}/htdocs/${{ secrets.CLOUDPANEL_DOMAIN }}"
            
            # Move to temp directory for fresh deployment
            cd /tmp
            rm -rf deploy-temp
            git clone https://github.com/${{ github.repository }} deploy-temp
            
            # Kill existing process first to release file locks
            pkill -f "next start" || true
            pkill -f "node.*server.js" || true
            screen -S nextapp -X quit || true
            
            # Wait a moment for processes to fully terminate
            sleep 5
            
            # Change to htdocs directory
            cd /home/${{ secrets.CLOUDPANEL_USER }}/htdocs/
            
            # Use a more robust approach to handle the old directory
            if [ -d "${{ secrets.CLOUDPANEL_DOMAIN }}" ]; then
              # Try to change ownership first (if you have sudo access)
              sudo chown -R ${{ secrets.CLOUDPANEL_USER }}:${{ secrets.CLOUDPANEL_USER }} ${{ secrets.CLOUDPANEL_DOMAIN }} || true
              
              # Try to change permissions to make files writable
              chmod -R 755 ${{ secrets.CLOUDPANEL_DOMAIN }} || true
              
              # Move to backup location with timestamp
              BACKUP_NAME="${{ secrets.CLOUDPANEL_DOMAIN }}_backup_$(date +%Y%m%d_%H%M%S)"
              mv ${{ secrets.CLOUDPANEL_DOMAIN }} $BACKUP_NAME || true
              
              # If move failed, try force removal with sudo
              if [ -d "${{ secrets.CLOUDPANEL_DOMAIN }}" ]; then
                sudo rm -rf ${{ secrets.CLOUDPANEL_DOMAIN }} || true
              fi
              
              # Clean up old backups (keep only last 3)
              ls -dt ${{ secrets.CLOUDPANEL_DOMAIN }}_backup_* 2>/dev/null | tail -n +4 | xargs -r rm -rf
            fi
            
            # Move fresh code to domain directory
            mv /tmp/deploy-temp ${{ secrets.CLOUDPANEL_DOMAIN }}
            cd ${{ secrets.CLOUDPANEL_DOMAIN }}
            
            # Set proper ownership and permissions
            sudo chown -R ${{ secrets.CLOUDPANEL_USER }}:${{ secrets.CLOUDPANEL_USER }} . || true
            chmod -R 755 . || true
            
            # Install and build
            npm install --legacy-peer-deps
            npm run build
            
            # Start app in background and exit immediately
            npm start &
            echo "âœ… Deployment completed - app starting in background"
      
      - name: Send failure notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: 'Deployment Failed - ${{ github.repository }}'
          body: |
            Deployment failed for commit ${{ github.sha }}
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.event.head_commit.message }}
            
            View logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: 'GitHub Actions'
