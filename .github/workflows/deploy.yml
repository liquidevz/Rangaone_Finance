name: Docker Deploy to Domain

on:
  push:
    branches: [main]

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'
  #     - run: npm install --legacy-peer-deps
  #     - run: npm run build
  #     - run: npm run lint

  # docker-test:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Test Docker Build
  #       id: docker-build
  #       run: |
  #         docker build -t test-build . 2>&1 | tee build.log
  #         if [ ${PIPESTATUS[0]} -ne 0 ]; then
  #           echo "BUILD_FAILED=true" >> $GITHUB_OUTPUT
  #           echo "BUILD_LOG<<EOF" >> $GITHUB_OUTPUT
  #           cat build.log >> $GITHUB_OUTPUT
  #           echo "EOF" >> $GITHUB_OUTPUT
  #           exit 1
  #         fi
  #     
  #     - name: Send Docker Build Failure Email
  #       if: failure()
  #       uses: dawidd6/action-send-mail@v3
  #       with:
  #         server_address: smtp.gmail.com
  #         server_port: 587
  #         username: ${{ secrets.EMAIL_USERNAME }}
  #         password: ${{ secrets.EMAIL_PASSWORD }}
  #         subject: 'Docker Build Failed - ${{ github.repository }}'
  #         body: |
  #           Docker build failed for commit ${{ github.sha }}
  #           
  #           Repository: ${{ github.repository }}
  #           Branch: ${{ github.ref }}
  #           
  #           Build Error:
  #           ${{ steps.docker-build.outputs.BUILD_LOG }}
  #           
  #           Common fixes:
  #           - Check package.json dependencies
  #           - Verify Dockerfile syntax
  #           - Check for missing files
  #           
  #           View logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  #         to: ${{ secrets.NOTIFICATION_EMAIL }}
  #         from: 'GitHub Actions'

  deploy:
    # needs: [test, docker-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Build application
        run: |
          npm install --legacy-peer-deps
          npm run build
      
      - name: Deploy to CloudPanel
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.CLOUDPANEL_HOST }}
          username: ${{ secrets.CLOUDPANEL_USER }}
          password: ${{ secrets.CLOUDPANEL_PASSWORD }}
          port: 22
          debug: true
          use_insecure_cipher: true
          timeout: 300s
          command_timeout: 300s
          script: |
            # Install Node.js 20 if not present
            export NVM_DIR="$HOME/.nvm"
            if [ ! -d "$NVM_DIR" ]; then
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
            fi
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install 20
            nvm use 20
            
            # Setup domain directory
            DOMAIN_PATH="/home/${{ secrets.CLOUDPANEL_USER }}/htdocs/${{ secrets.CLOUDPANEL_DOMAIN }}"
            rm -rf $DOMAIN_PATH
            mkdir -p $DOMAIN_PATH
            cd $DOMAIN_PATH
            
            # Clone repository
            git clone https://github.com/${{ github.repository }} .
            
            # Install dependencies and build
            npm install --legacy-peer-deps
            npm run build
            
            # Create PM2 ecosystem file
            cat > ecosystem.config.js << 'EOF'
            module.exports = {
              apps: [{
                name: 'rangaone-fe',
                script: '.next/standalone/server.js',
                instances: 1,
                autorestart: true,
                watch: false,
                max_memory_restart: '1G',
                env: {
                  NODE_ENV: 'production',
                  PORT: 3000
                }
              }]
            };
            EOF
            
            # Install PM2 if not present
            if ! command -v pm2 &> /dev/null; then
              npm install -g pm2
            fi
            
            # Copy static files to standalone
            cp -r .next/static .next/standalone/.next/
            cp -r public .next/standalone/
            
            # Stop existing process and start new one
            pm2 delete rangaone-fe || true
            pm2 start ecosystem.config.js
            pm2 save
            
            # Set proper permissions
            chown -R ${{ secrets.CLOUDPANEL_USER }}:${{ secrets.CLOUDPANEL_USER }} .
            chmod -R 755 .
            
            echo "âœ… Next.js app deployed successfully on port d3000"
      
      - name: Send failure notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: 'Deployment Failed - ${{ github.repository }}'
          body: |
            Deployment failed for commit ${{ github.sha }}
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.event.head_commit.message }}
            
            View logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: 'GitHub Actions'