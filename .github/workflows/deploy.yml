name: Deploy to Production

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  DOCKER_IMAGE: nextjs-app
  CONTAINER_NAME: nextjs-production

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build application
        run: npm run build

      - name: Run linter
        run: npm run lint

  docker-test:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Test Docker Build
        id: docker-build
        run: |
          docker build -t test-build . 2>&1 | tee build.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "BUILD_FAILED=true" >> $GITHUB_OUTPUT
            echo "BUILD_LOG<<EOF" >> $GITHUB_OUTPUT
            cat build.log >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "‚úÖ Docker build test successful"

      - name: Send Docker Build Failure Email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: 'Docker Build Failed - ${{ github.repository }}'
          body: |
            Docker build failed for commit ${{ github.sha }}
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            
            Build Error:
            ${{ steps.docker-build.outputs.BUILD_LOG }}
            
            Common fixes:
            - Check package.json dependencies
            - Verify Dockerfile syntax
            - Check for missing files
            - Check next.config.mjs standalone output
            
            View logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: 'GitHub Actions'

  deploy:
    needs: [test, docker-test]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy with Docker
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.CLOUDPANEL_HOST }}
          username: ${{ secrets.CLOUDPANEL_USER }}
          password: ${{ secrets.CLOUDPANEL_PASSWORD }}
          timeout: 300s
          command_timeout: 300s
          script: |
            set -e
            echo "üöÄ Starting Docker deployment..."
            
            # Setup domain directory
            DOMAIN_PATH="/home/${{ secrets.CLOUDPANEL_USER }}/htdocs/${{ secrets.CLOUDPANEL_DOMAIN }}"
            
            # Create directory if it doesn't exist
            mkdir -p $DOMAIN_PATH
            cd $DOMAIN_PATH
            
            # Clean and update repository
            echo "üì• Updating code..."
            if [ -d ".git" ]; then
              git fetch origin
              git reset --hard origin/master
              git clean -fd
            else
              cd ..
              rm -rf ${{ secrets.CLOUDPANEL_DOMAIN }}
              mkdir -p ${{ secrets.CLOUDPANEL_DOMAIN }}
              cd ${{ secrets.CLOUDPANEL_DOMAIN }}
              git clone https://github.com/${{ github.repository }} .
            fi
            
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "üì¶ Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker ${{ secrets.CLOUDPANEL_USER }}
            fi
            
            # Stop and remove existing container
            echo "üõë Stopping existing container..."
            docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || true
            docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || true
            
            # Remove old image
            docker rmi ${{ env.DOCKER_IMAGE }}:latest 2>/dev/null || true
            
            # Build new Docker image
            echo "üî® Building Docker image..."
            docker build -t ${{ env.DOCKER_IMAGE }}:latest .
            
            # Start new container
            echo "‚ñ∂Ô∏è Starting new container..."
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              --restart unless-stopped \
              -p 3000:3000 \
              -v $PWD/public:/app/public:ro \
              ${{ env.DOCKER_IMAGE }}:latest
            
            # Wait for container to start
            echo "‚è≥ Waiting for container to start..."
            sleep 15
            
            # Health check
            if docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
              echo "‚úÖ Container is running!"
              docker logs --tail 10 ${{ env.CONTAINER_NAME }}
              
              # Test if app responds
              if curl -f http://localhost:3000 >/dev/null 2>&1; then
                echo "‚úÖ App is responding on port 3000"
              else
                echo "‚ö†Ô∏è App might be starting up, check logs later"
              fi
            else
              echo "‚ùå Container failed to start!"
              docker logs ${{ env.CONTAINER_NAME }} 2>/dev/null || echo "No logs available"
              exit 1
            fi
            
            # Clean up unused images and containers
            docker container prune -f 2>/dev/null || true
            docker image prune -f 2>/dev/null || true
            
            echo "üéâ Docker deployment completed!"
            echo "üìä Final status:"
            docker ps | grep ${{ env.CONTAINER_NAME }}

      - name: Send deployment failure notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER || 'smtp.gmail.com' }}
          server_port: ${{ secrets.SMTP_PORT || '587' }}
          username: ${{ secrets.SMTP_USERNAME || secrets.EMAIL_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD || secrets.EMAIL_PASSWORD }}
          subject: 'Docker Deployment Failed - ${{ github.repository }}'
          body: |
            Docker deployment failed for commit ${{ github.sha }}
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.event.head_commit.message }}
            
            Possible causes:
            - Docker build failed
            - Container startup issues
            - Port conflicts
            - Resource limitations
            
            View logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            SSH to server and check:
            - docker logs nextjs-production
            - docker ps -a
            - docker images
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: 'GitHub Actions Docker Deploy'

  notify-success:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Send success notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER || 'smtp.gmail.com' }}
          server_port: ${{ secrets.SMTP_PORT || '587' }}
          username: ${{ secrets.SMTP_USERNAME || secrets.EMAIL_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD || secrets.EMAIL_PASSWORD }}
          subject: '‚úÖ Docker Deployment Successful - ${{ github.repository }}'
          body: |
            üéâ Docker deployment completed successfully!
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Message: ${{ github.event.head_commit.message }}
            
            üê≥ Docker Container: nextjs-production
            üåê App should be running on port 3000
            
            Next steps:
            - Configure nginx reverse proxy if needed
            - Set up SSL certificate
            - Monitor application logs
            
            View deployment: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: 'GitHub Actions Docker Deploy'
