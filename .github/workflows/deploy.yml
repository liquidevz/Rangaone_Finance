name: Lightning CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ Checkout source code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2️⃣ Setup Docker Buildx for advanced caching
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3️⃣ Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ github.sha }}
          restore-keys: |
            buildx-

      # 4️⃣ Build Docker image once
      - name: Build Docker image
        id: build
        run: |
          IMAGE_TAG=nextjs-app:${GITHUB_SHA}
          docker build --cache-from=type=local,src=/tmp/.buildx-cache \
                       --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
                       -t $IMAGE_TAG .
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # 5️⃣ Save image to a tar file (optional if SSH copy is needed)
      - name: Save Docker image
        run: docker save $IMAGE_TAG -o nextjs-app.tar

      # 6️⃣ Deploy via SSH
      - name: SSH Deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            IMAGE_TAG=${{ env.IMAGE_TAG }}

            # Stop and remove old container
            docker stop nextjs-app 2>/dev/null || true
            docker rm nextjs-app 2>/dev/null || true

            # Load new image
            docker load < nextjs-app.tar || docker pull $IMAGE_TAG

            # Run new container
            docker run -d \
              --name nextjs-app \
              --restart unless-stopped \
              -p 3000:3000 \
              $IMAGE_TAG
